//FRANCISCO AYROLO
//BASES DE DATOS
//FINAL 2DA mesa, 19-12-2024

use("supplies")
db.sales.findOne()

//EJERCICIO 1
//Buscar las ventas donde el método de compra (purchaseMethod) sea 'Online' y la
//cantidad de items sea entre 5 y 8 inclusives. Listar el email y la edad (age) del
//cliente, y el monto total facturado, donde el monto de cada item se calcula como
//'price * quantity'. Mostrar el resultado en orden alfabético.
//HINTS: El operador $reduce puede ser de utilidad

use("supplies")
db.sales.aggregate([
    {
        $match: {
            "purchaseMethod": "Online",
            $expr: {
            $and: [
                {$gte: [{$size: "$items"}, 5]},
                {$lte: [{$size: "$items"}, 8]}
                ]
            }
        }
    },
    {
        $project: {
            "_id":0, "mail_cliente": "$customer.email", 
            "Edad": "$customer.age",
            monto_total: {
                $reduce: {
                    input: "$items",
                    initialValue: 0,
                    in: {
                        $add: [ 
                            "$$value", 
                            {$multiply: ["$$this.price", "$$this.quantity"]}
                        ]
                    }
                }
            }
        }
    }
])


//EJERCICIO 2
//Crear la vista salesInvoiced que calcula el monto total y monto promedio facturado
//por año y mes. Mostrar el resultado en orden cronológico. No se debe mostrar
//campos anidados en el resultado

//ESTA ES LA SOLUCION QUE ENTREGUÉ EN SU MOMENTO EL AÑO PASADO, MÁS ABAJO
//HAY UNA QUE ME PARECE MEJOR Y MÁS LIMPIA, PERO NO TERMINO DE HACER ANDAR
//LA SINTAXIS


use("supplies")
db.createView(
    "salesInvoiced",
    "sales",
    [
        {
            $unwind: "$items"
        },
        {
            $group: {
                "_id": {
                    "year": {$year: "$saleDate"}, "month": {$month: "$saleDate"}
                },
                "monto_total": {
                    $sum: {$multiply: ["$items.price", "$items.quantity"]}
                },
                "monto_promedio": {
                    $avg: {$multiply: ["$items.price", "$items.quantity"]}
                }
            }
        },
        {
            $sort: {"_id":1}
        },
        {
            $project: {
                "_id":0, "año": "$_id.year", "mes": "$_id.month",
                "monto_total":1, "monto_promedio":1
            }
        }
    ])


//CON ESTA SINTAXIS SE TENDRÍA QUE PODER HACER MÁS LIMPIA LA QUERY
use("supplies")
db.sales.aggregate([
    {
        $group: {
            "_id": {
                "year": {$year: "$saleDate"}, "month": {$month: "$saleDate"}
            },
            all_sales: {$concatArrays: "$items"}
        }
    },
    {
        $sort: {"_id":1}
    },
    {
        $project: {
            "_id":0, "año": "$_id.year", "mes": "$_id.month",
            monto_total: {
                $reduce: {
                    input: "$items",
                    initialValue: 0,
                    in: {
                        $add: [ 
                            "$$value", 
                            {$multiply: ["$$this.price", "$$this.quantity"]}
                        ]
                    }
                }
            },
            monto_promedio: //Y ACA ALGO PARECIDO PERO SACANDO EL PROMEDIO
        }
    }
])